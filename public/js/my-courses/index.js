/**
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ú–æ–∏ –∫—É—Ä—Å—ã" –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
 */
class TeacherCourses {
  constructor() {
    this.coursesGrid = document.getElementById('teacher-courses-grid');
    this.preloader = document.getElementById('courses-preloader');
    this.emptyState = document.getElementById('courses-empty');
    this.courseFilter = document.getElementById('course-filter');
    this.totalCoursesElement = document.getElementById('total-courses');
    this.totalStudentsElement = document.getElementById('total-students');
    this.publishedCoursesElement = document.getElementById('published-courses');
    this.notificationsContainer = document.getElementById('notifications');
    
    this.courses = [];
    
    this.init();
  }
  
  async init() {
    // Check for stored notifications
    this.checkStoredNotifications();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã
    await this.loadCourses();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (this.courseFilter) {
      this.courseFilter.addEventListener('change', () => {
        this.displayCourses(this.courses, this.courseFilter.value);
      });
    }
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SSE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    this.connectToSSE();
  }
  
  async loadCourses() {
    try {
      const response = await fetch('/courses/api/my', {
        credentials: 'include'
      });
      
      if (!response.ok) {
        throw new Error('Failed to load courses');
      }
      
      this.courses = await response.json();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateStats(this.courses);
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—É—Ä—Å—ã
      this.displayCourses(this.courses);
      
      if (this.preloader) {
        this.preloader.style.display = 'none';
      }
      
      if (this.courses.length === 0 && this.emptyState) {
        this.emptyState.style.display = 'block';
      } else if (this.coursesGrid) {
        this.coursesGrid.style.display = 'grid';
      }
    } catch (error) {
      console.error('Error loading courses:', error);
      if (this.preloader) {
        this.preloader.innerHTML = `<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã. ${error.message}</p>`;
      }
    }
  }
  
  updateStats(coursesList) {
    const totalCourses = coursesList.length;
    
    // –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    let totalStudents = 0;
    const studentIds = new Set();
    coursesList.forEach(course => {
      if (course.enrollments) {
        course.enrollments.forEach(enrollment => {
          studentIds.add(enrollment.userId);
        });
      }
    });
    totalStudents = studentIds.size;
    
    // –°—á–∏—Ç–∞–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    const published = coursesList.filter(course => course.published).length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    if (this.totalCoursesElement) this.totalCoursesElement.textContent = totalCourses;
    if (this.totalStudentsElement) this.totalStudentsElement.textContent = totalStudents;
    if (this.publishedCoursesElement) this.publishedCoursesElement.textContent = published;
  }
  
  displayCourses(coursesList, filter = 'all') {
    if (!this.coursesGrid) return;
    
    this.coursesGrid.innerHTML = '';
    
    let filteredCourses = coursesList;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    if (filter === 'published') {
      filteredCourses = coursesList.filter(course => course.published);
    } else if (filter === 'draft') {
      filteredCourses = coursesList.filter(course => !course.published);
    }
    
    // if (filteredCourses.length === 0) {
    //   this.coursesGrid.innerHTML = `
    //     <div class="empty-filter">
    //       <p>–ù–µ—Ç –∫—É—Ä—Å–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É.</p>
    //     </div>
    //   `;
    //   return;
    // }
    
    filteredCourses.forEach(course => {
      const courseCard = document.createElement('div');
      courseCard.className = 'course-card';
      courseCard.id = `course-${course.id}`;
      
      courseCard.innerHTML = `
        <span class="course-status ${course.published ? 'status-published' : 'status-draft'}">
            ${course.published ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}
        </span>
        <div class="course-header">
          <h3 class="course-title">${course.title}</h3>
          <div class="course-category">${course.category ? course.category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</div>
        </div>
        <div class="course-info">
          <div class="info-item">
            <span class="info-icon">üìö</span>
            <span>${course.lessons ? course.lessons.length : 0} —É—Ä–æ–∫–æ–≤</span>
          </div>
          <div class="info-item">
            <span class="info-icon">üë®‚Äçüéì</span>
            <span>${course.enrollments ? course.enrollments.length : 0} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</span>
          </div>
        </div>
        <div class="course-actions">
          <a href="/courses/my/${course.id}" class="course-btn btn-edit">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</a>
          <button class="course-btn btn-delete" data-id="${course.id}">–£–¥–∞–ª–∏—Ç—å</button>
        </div>
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      const deleteBtn = courseCard.querySelector('.btn-delete');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async (e) => {
          await this.deleteCourse(e, course.id, courseCard);
        });
      }
      
      this.coursesGrid.appendChild(courseCard);
    });
  }
  
  async deleteCourse(event, courseId, courseCard) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      try {
        const response = await fetch(`/courses/api/${courseId}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error('Failed to delete course');
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
        this.courses = this.courses.filter(c => c.id !== courseId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats(this.courses);
        
        // –£–¥–∞–ª—è–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        courseCard.style.opacity = '0';
        setTimeout(() => {
          courseCard.remove();
          if (this.courses.length === 0) {
            if (this.coursesGrid) this.coursesGrid.style.display = 'none';
            if (this.emptyState) this.emptyState.style.display = 'block';
          }
        }, 300);
        
        // this.showNotification('success', '–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω', '–ö—É—Ä—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
      } catch (error) {
        console.error('Error deleting course:', error);
        this.showNotification('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  }
  
  showNotification(type, title, message) {
    if (!this.notificationsContainer) return;
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    
    let icon = 'üîî';
    if (type === 'success') icon = '‚úÖ';
    if (type === 'error') icon = '‚ùå';
    if (type === 'info') icon = '‚ÑπÔ∏è';
    
    notification.innerHTML = `
      <div class="notification-icon">${icon}</div>
      <div class="notification-content">
        <div class="notification-title">${title}</div>
        <div class="notification-message">${message}</div>
      </div>
    `;
    
    this.notificationsContainer.appendChild(notification);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      notification.style.opacity = '0';
      notification.style.transform = 'translateX(50px)';
      setTimeout(() => {
        notification.remove();
      }, 300);
    }, 5000);
  }
  
  connectToSSE() {
    console.log('Connecting to SSE endpoint...');
    if (this.eventSource) {
      this.eventSource.close();
    }
    
    this.eventSource = new EventSource('/courses/events', { withCredentials: true });
    
    this.eventSource.addEventListener('open', () => {
      console.log('SSE connection established');
      this.showNotification('info', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', '–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    });
    
    this.eventSource.addEventListener('course-update', (event) => {
      try {
        console.log('Raw SSE event received:', event);
        const data = JSON.parse(event.data);
        console.log('SSE course-update event received:', data);
        
        if (data.action === 'create') {
          this.showNotification('info', '–ù–æ–≤—ã–π –∫—É—Ä—Å', `–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫—É—Ä—Å: "${data.title}"`);
          this.loadCourses();
        } else if (data.action === 'update') {
          this.showNotification('success', '–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω', `–ö—É—Ä—Å "${data.title}" –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω`);
          this.loadCourses();
        } else if (data.action === 'delete') {
          this.showNotification('warning', '–ö—É—Ä—Å —É–¥–∞–ª–µ–Ω', `–ö—É—Ä—Å "${data.title}" –±—ã–ª —É–¥–∞–ª–µ–Ω`);
          this.loadCourses();
        }
        else {
          this.showNotification('success', '–¢–µ—Å—Ç', `–¢–µ—Å—Ç`);
        }
      } catch (error) {
        console.error('Error parsing SSE event data:', error, event.data);
      }
    });
    
    this.eventSource.addEventListener('message', (event) => {
      console.log('SSE default message received:', event.data);
      try {
        const data = JSON.parse(event.data);
        console.log('Parsed message data:', data);
      } catch (error) {
        console.error('Error parsing default message:', error);
      }
    });
    
    this.eventSource.addEventListener('heartbeat', (event) => {
      console.log('SSE heartbeat received:', event.data);
    });
    
    this.eventSource.addEventListener('error', (error) => {
      console.error('SSE connection error:', error);
      this.eventSource.close();
      
      console.log('Attempting to reconnect in 5 seconds...');
      setTimeout(() => this.connectToSSE(), 5000);
    });
  }

  checkStoredNotifications() {
    const storedNotification = localStorage.getItem('course_notification');
    if (storedNotification) {
      try {
        const notification = JSON.parse(storedNotification);
        
        // Only show notifications that are less than 3 seconds old
        if (Date.now() - notification.timestamp < 3000) {
          this.showNotification(
            notification.type,
            notification.title,
            notification.message
          );
        }
        
        localStorage.removeItem('course_notification');
      } catch (error) {
        console.error('Error parsing stored notification:', error);
        localStorage.removeItem('course_notification');
      }
    }
  }
}

document.addEventListener('DOMContentLoaded', function() {
  const teacherCourses = new TeacherCourses();
});

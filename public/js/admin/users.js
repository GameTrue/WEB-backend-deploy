/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
class AdminUsers {
  constructor() {
    this.users = [];
    this.usersTable = document.getElementById('users-table');
    this.usersTableBody = document.getElementById('users-tbody');
    this.usersPreloader = document.getElementById('users-preloader');
    this.searchInput = document.getElementById('users-search');
    this.roleFilter = document.getElementById('users-role-filter');
    this.statusFilter = document.getElementById('users-status-filter');
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    this.editUserModal = document.getElementById('edit-user-modal');
    this.viewUserModal = document.getElementById('view-user-modal');
  }

  async init() {
    this.bindEvents();
    await this.loadUsers();
  }

  bindEvents() {
    // –ü–æ–∏—Å–∫
    if (this.searchInput) {
      this.searchInput.addEventListener('input', this.handleSearch.bind(this));
    }
    
    // –§–∏–ª—å—Ç—Ä—ã
    if (this.roleFilter) {
      this.roleFilter.addEventListener('change', this.applyFilters.bind(this));
    }
    
    if (this.statusFilter) {
      this.statusFilter.addEventListener('change', this.applyFilters.bind(this));
    }
    
    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ
    if (this.usersTableBody) {
      this.usersTableBody.addEventListener('click', this.handleTableActions.bind(this));
    }
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const addUserBtn = document.getElementById('add-user-btn');
    if (addUserBtn) {
      addUserBtn.addEventListener('click', this.showAddUserModal.bind(this));
    }
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (this.editUserModal) {
      // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      const saveBtn = this.editUserModal.querySelector('#save-user-btn');
      if (saveBtn) {
        saveBtn.addEventListener('click', this.updateUser.bind(this));
      }
      
      // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      const closeButtons = this.editUserModal.querySelectorAll('.admin-modal-close');
      closeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          this.closeModal(this.editUserModal);
        });
      });
    }
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (this.viewUserModal) {
      const editBtn = this.viewUserModal.querySelector('#edit-profile-btn');
      if (editBtn) {
        editBtn.addEventListener('click', () => {
          const userId = editBtn.getAttribute('data-id');
          this.closeModal(this.viewUserModal);
          this.editUser(userId);
        });
      }
      
      // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      const closeButtons = this.viewUserModal.querySelectorAll('.admin-modal-close');
      closeButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          this.closeModal(this.viewUserModal);
        });
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
      this.viewUserModal.addEventListener('click', async (e) => {
        const terminateBtn = e.target.closest('[data-session-id]');
        if (terminateBtn) {
          const userId = terminateBtn.getAttribute('data-user-id');
          const sessionId = terminateBtn.getAttribute('data-session-id');
          await this.terminateSession(userId, sessionId, terminateBtn);
        }
      });
    }
  }

  async loadUsers() {
    if (this.usersPreloader) {
      this.usersPreloader.style.display = 'block';
    }
    if (this.usersTable) {
      this.usersTable.style.display = 'none';
    }
    
    try {
      const response = await fetch('/api/admin/users', {
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to load users');
      
      this.users = await response.json();
      this.renderUsers(this.users);
      
      if (this.usersPreloader) {
        this.usersPreloader.style.display = 'none';
      }
      if (this.usersTable) {
        this.usersTable.style.display = 'table';
      }
    } catch (error) {
      console.error('Error loading users:', error);
      if (this.usersPreloader) {
        this.usersPreloader.innerHTML = `<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}</p>`;
      }
    }
  }

  renderUsers(users) {
    if (!this.usersTableBody) return;
    
    this.usersTableBody.innerHTML = '';
    
    if (users.length === 0) {
      this.usersTableBody.innerHTML = `
        <tr>
          <td colspan="7" class="text-center">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td>
        </tr>
      `;
      return;
    }
    
    users.forEach(user => {
      const statusClass = user.active ? 'status-active' : 'status-inactive';
      const statusText = user.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
      
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>
          <div class="user-info">
            <img src="${user.avatar || 'https://via.placeholder.com/40'}" alt="${user.name}" class="avatar">
            <div>
              <div class="user-name">${user.name}</div>
              <div class="user-email">${user.email}</div>
            </div>
          </div>
        </td>
        <td><span class="user-role">${this.formatRole(user.role)}</span></td>
        <td>${new Date(user.createdAt).toLocaleDateString()}</td>
        <td><span class="status-pill ${statusClass}">${statusText}</span></td>
        <td>${user.coursesCount || 0}</td>
        <td>${user.lastLogin ? new Date(user.lastLogin).toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}</td>
        <td>
          <div class="admin-actions">
            <button class="admin-action view" title="–ü—Ä–æ—Å–º–æ—Ç—Ä" data-action="view" data-id="${user.id}">üëÅÔ∏è</button>
            <button class="admin-action edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" data-action="edit" data-id="${user.id}">‚úèÔ∏è</button>
            <button class="admin-action delete" title="–£–¥–∞–ª–∏—Ç—å" data-action="delete" data-id="${user.id}">üóëÔ∏è</button>
          </div>
        </td>
      `;
      
      this.usersTableBody.appendChild(row);
    });
  }

  formatRole(role) {
    const roles = {
      admin: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      teacher: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å',
      student: '–°—Ç—É–¥–µ–Ω—Ç'
    };
    
    return roles[role] || role;
  }

  handleSearch() {
    this.applyFilters();
  }

  applyFilters() {
    const searchTerm = this.searchInput ? this.searchInput.value.toLowerCase() : '';
    const roleFilter = this.roleFilter ? this.roleFilter.value : 'all';
    const statusFilter = this.statusFilter ? this.statusFilter.value : 'all';
    
    let filteredUsers = [...this.users];
    
    if (searchTerm) {
      filteredUsers = filteredUsers.filter(user => 
        user.name.toLowerCase().includes(searchTerm) || 
        user.email.toLowerCase().includes(searchTerm)
      );
    }
    
    if (roleFilter !== 'all') {
      filteredUsers = filteredUsers.filter(user => user.role === roleFilter);
    }
    
    if (statusFilter !== 'all') {
      const isActive = statusFilter === 'active';
      filteredUsers = filteredUsers.filter(user => user.active === isActive);
    }
    
    this.renderUsers(filteredUsers);
  }

  async handleTableActions(e) {
    const actionButton = e.target.closest('[data-action]');
    if (!actionButton) return;
    
    const action = actionButton.getAttribute('data-action');
    const userId = actionButton.getAttribute('data-id');
    
    switch (action) {
      case 'view':
        this.viewUser(userId);
        break;
      case 'edit':
        this.editUser(userId);
        break;
      case 'delete':
        this.confirmDeleteUser(userId);
        break;
    }
  }

  async viewUser(userId) {
    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to fetch user details');
      
      const user = await response.json();
      this.fillViewUserModal(user);
      this.openModal(this.viewUserModal);
    } catch (error) {
      console.error('Error fetching user details:', error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  fillViewUserModal(user) {
    if (!this.viewUserModal) return;
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.viewUserModal.querySelector('#profile-name').textContent = user.name;
    this.viewUserModal.querySelector('#profile-email').textContent = user.email;
    
    const statusElem = this.viewUserModal.querySelector('#profile-status');
    statusElem.textContent = user.active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
    statusElem.className = `status-pill ${user.active ? 'status-active' : 'status-inactive'}`;
    
    this.viewUserModal.querySelector('#profile-avatar').src = user.avatar || 'https://via.placeholder.com/100';
    this.viewUserModal.querySelector('#profile-id').textContent = user.id;
    this.viewUserModal.querySelector('#profile-role').textContent = this.formatRole(user.role);
    this.viewUserModal.querySelector('#profile-created').textContent = new Date(user.createdAt).toLocaleDateString();
    this.viewUserModal.querySelector('#profile-last-login').textContent = user.lastLogin ? new Date(user.lastLogin).toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞';
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫—É—Ä—Å—ã
    const coursesElem = this.viewUserModal.querySelector('#profile-courses');
    if (user.courses && user.courses.length > 0) {
      coursesElem.innerHTML = `
        <ul class="user-courses-list">
          ${user.courses.map(course => 
            `<li>
              <span class="course-title">${course.title}</span>
              <span class="course-progress">${course.progress || 0}%</span>
            </li>`
          ).join('')}
        </ul>
      `;
    } else {
      coursesElem.innerHTML = '<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å</p>';
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Å—Å–∏–∏
    const sessionsElem = this.viewUserModal.querySelector('#profile-sessions');
    if (user.sessions && user.sessions.length > 0) {
      sessionsElem.innerHTML = `
        <table class="sessions-table">
          <thead>
            <tr>
              <th>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</th>
              <th>IP-–∞–¥—Ä–µ—Å</th>
              <th>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            ${user.sessions.map(session => 
              `<tr>
                <td>${session.userAgent}</td>
                <td>${session.ipAddress}</td>
                <td>${new Date(session.createdAt).toLocaleString()}</td>
                <td>
                  <button class="admin-action delete" title="–ó–∞–≤–µ—Ä—à–∏—Ç—å" data-user-id="${user.id}" data-session-id="${session.id}">‚ùå</button>
                </td>
              </tr>`
            ).join('')}
          </tbody>
        </table>
      `;
    } else {
      sessionsElem.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π</p>';
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    this.viewUserModal.querySelector('#edit-profile-btn').setAttribute('data-id', user.id);
  }

  editUser(userId) {
    const user = this.users.find(u => u.id === userId);
    if (!user) return;
    
    this.fillEditUserModal(user);
    this.openModal(this.editUserModal);
  }

  fillEditUserModal(user) {
    if (!this.editUserModal) return;
    
    this.editUserModal.querySelector('#user-id').value = user.id;
    this.editUserModal.querySelector('#user-name').value = user.name;
    this.editUserModal.querySelector('#user-email').value = user.email;
    this.editUserModal.querySelector('#user-role').value = user.role;
    this.editUserModal.querySelector('#user-avatar').value = user.avatar || '';
    
    const activeCheckbox = this.editUserModal.querySelector('#user-active');
    if (activeCheckbox) {
      activeCheckbox.checked = user.active;
    }
    
    this.editUserModal.querySelector('#user-password').value = '';
  }

  async updateUser(e) {
    if (!this.editUserModal) return;
    
    const form = this.editUserModal.querySelector('#edit-user-form');
    if (!form) return;
    
    const formData = new FormData(form);
    const userId = formData.get('id');
    
    const userData = {
      name: formData.get('name'),
      email: formData.get('email'),
      role: formData.get('role'),
      active: formData.get('active') === 'on',
      avatar: formData.get('avatar') || null
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
    const password = formData.get('password');
    if (password) {
      userData.password = password;
    }
    
    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData),
        credentials: 'include'
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to update user');
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      this.closeModal(this.editUserModal);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.refresh();
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('Error updating user:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
    }
  }

  confirmDeleteUser(userId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      this.deleteUser(userId);
    }
  }

  async deleteUser(userId) {
    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to delete user');
      
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
      await this.refresh();
    } catch (error) {
      console.error('Error deleting user:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  }

  showAddUserModal() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }

  async terminateSession(userId, sessionId, buttonElement) {
    try {
      const response = await fetch(`/api/admin/users/${userId}/sessions/${sessionId}`, {
        method: 'DELETE',
        credentials: 'include'
      });
      
      if (!response.ok) throw new Error('Failed to terminate session');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      const row = buttonElement.closest('tr');
      if (row) {
        row.style.backgroundColor = '#ffcccc';
        setTimeout(() => {
          row.remove();
        }, 500);
      }
    } catch (error) {
      console.error('Error terminating session:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
    }
  }

  openModal(modal) {
    if (!modal) return;
    
    setTimeout(() => {
      modal.classList.add('active');
    }, 10);
  }

  closeModal(modal) {
    if (!modal) return;
    
    modal.classList.remove('active');
  }

  async refresh() {
    await this.loadUsers();
  }
}

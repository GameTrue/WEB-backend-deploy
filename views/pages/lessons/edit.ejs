<% contentFor('body') %>
<div class="lesson-edit-container">
  <div class="breadcrumbs">
    <a href="/courses/my">–ú–æ–∏ –∫—É—Ä—Å—ã</a> /
    <a href="/courses/my/<%= course.id %>"><%= course.title %></a> /
    <a href="/lessons/<%= lesson.id %>"><%= lesson.title %></a> /
    <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
  </div>
  
  <h1 class="page-title">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞</h1>
  
  <div class="lesson-edit-tabs">
    <button class="tab-button active" data-tab="content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞</button>
    <button class="tab-button" data-tab="assignments">–ó–∞–¥–∞–Ω–∏—è (<%= lesson.assignments ? lesson.assignments.length : 0 %>)</button>
    <button class="tab-button" data-tab="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</button>
  </div>
  
  <div class="tab-content active" id="content-tab">
    <form id="edit-lesson-form">
      <div class="form-group">
        <label for="lesson-title">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞*</label>
        <input type="text" id="lesson-title" name="title" value="<%= lesson.title %>" required>
      </div>
      
      <div class="form-group">
        <label for="lesson-content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Ä–æ–∫–∞*</label>
        <textarea id="lesson-content" name="content" rows="15" required><%= lesson.content %></textarea>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="button-blue">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è</button>
        <a href="/lessons/<%= lesson.id %>" class="button-grey">–û—Ç–º–µ–Ω–∞</a>
      </div>
    </form>
  </div>
  
  <div class="tab-content" id="assignments-tab">
    <div class="assignments-header">
      <h3>–ó–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞</h3>
      <a href="/assignments/create/<%= lesson.id %>" class="button-blue">–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</a>
    </div>
    
    <% if (lesson.assignments && lesson.assignments.length > 0) { %>
      <div class="assignments-list">
        <% lesson.assignments.forEach(assignment => { %>
          <div class="assignment-item" data-id="<%= assignment.id %>">
            <div class="assignment-info">
              <h4><%= assignment.title %></h4>
              <div class="assignment-meta">
                <span><strong>–ú–∞–∫—Å. –±–∞–ª–ª:</strong> <%= assignment.maxScore %></span>
                <% if (assignment.deadline) { %>
                  <span><strong>–°—Ä–æ–∫ —Å–¥–∞—á–∏:</strong> <%= new Date(assignment.deadline).toLocaleDateString() %></span>
                <% } %>
              </div>
            </div>
            <div class="assignment-actions">
              <a href="/assignments/edit/<%= assignment.id %>" class="edit-button" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</a>
              <button class="delete-button" data-id="<%= assignment.id %>" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
            </div>
          </div>
        <% }); %>
      </div>
    <% } else { %>
      <div class="no-assignments">
        <p>–£ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.</p>
        <p>–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —É—á–µ–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.</p>
      </div>
    <% } %>
  </div>
  
  <div class="tab-content" id="settings-tab">
    <form id="lesson-settings-form">
      <div class="form-group">
        <label for="lesson-order">–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –∫—É—Ä—Å–µ</label>
        <input type="number" id="lesson-order" name="order" value="<%= lesson.order %>" min="1">
      </div>
      
      <div class="form-group">
        <label for="lesson-duration">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö)</label>
        <input type="number" id="lesson-duration" name="duration" value="<%= lesson.duration || '' %>" min="1">
      </div>
      
      <div class="form-group checkbox">
        <input type="checkbox" id="lesson-published" name="published" <%= lesson.published ? 'checked' : '' %>>
        <label for="lesson-published">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —É—Ä–æ–∫</label>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="button-blue">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
      </div>
      
      <div class="danger-zone">
        <h4>–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h4>
        <button type="button" id="delete-lesson-btn" class="button-red">–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫</button>
      </div>
    </form>
  </div>
</div>

<div class="modal" id="delete-confirm-modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</h2>
    <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ "<%= lesson.title %>"?</p>
    <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.</p>
    <div class="modal-actions">
      <button id="confirm-delete" class="button-red">–£–¥–∞–ª–∏—Ç—å</button>
      <button class="button-grey cancel">–û—Ç–º–µ–Ω–∞</button>
    </div>
  </div>
</div>

<% contentFor('style') %>
<link rel="stylesheet" href="/css/lesson-edit.css">

<% contentFor('script') %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Tab switching
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Deactivate all tabs
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));
        
        // Activate selected tab
        button.classList.add('active');
        const tabId = button.getAttribute('data-tab') + '-tab';
        document.getElementById(tabId).classList.add('active');
      });
    });
    
    // Lesson content form
    const editLessonForm = document.getElementById('edit-lesson-form');
    if (editLessonForm) {
      editLessonForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const lessonData = {
          title: document.getElementById('lesson-title').value,
          content: document.getElementById('lesson-content').value
        };
        
        try {
          const response = await fetch('/lessons/api/<%= lesson.id %>', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(lessonData),
            credentials: 'include'
          });
          
          if (!response.ok) {
            throw new Error('Failed to update lesson');
          }
          
          alert('–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');

          window.location.href = '/lessons/<%= lesson.id %>';
          
        } catch (error) {
          console.error('Error updating lesson:', error);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: ' + error.message);
        }
      });
    }
    
    // Lesson settings form
    const lessonSettingsForm = document.getElementById('lesson-settings-form');
    if (lessonSettingsForm) {
      lessonSettingsForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const settingsData = {
          order: parseInt(document.getElementById('lesson-order').value) || 0,
          duration: parseInt(document.getElementById('lesson-duration').value) || null,
          published: document.getElementById('lesson-published').checked
        };
        
        try {
          const response = await fetch('/lessons/api/<%= lesson.id %>', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(settingsData),
            credentials: 'include'
          });
          
          if (!response.ok) {
            throw new Error('Failed to update lesson settings');
          }
          
          alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
          
        } catch (error) {
          console.error('Error updating lesson settings:', error);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message);
        }
      });
    }
    
    // Delete lesson confirmation
    const deleteBtn = document.getElementById('delete-lesson-btn');
    const deleteModal = document.getElementById('delete-confirm-modal');
    const confirmDeleteBtn = document.getElementById('confirm-delete');
    const closeModalBtns = document.querySelectorAll('#delete-confirm-modal .close, #delete-confirm-modal .cancel');
    
    if (deleteBtn && deleteModal) {
      deleteBtn.addEventListener('click', () => {
        deleteModal.style.display = 'block';
      });
      
      closeModalBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          deleteModal.style.display = 'none';
        });
      });
      
      if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', async () => {
          try {
            const response = await fetch('/lessons/api/<%= lesson.id %>', {
              method: 'DELETE',
              credentials: 'include'
            });
            
            if (!response.ok) {
              throw new Error('Failed to delete lesson');
            }
            
            // Redirect to course page
            window.location.href = '/courses/my/<%= course.id %>';
            
          } catch (error) {
            console.error('Error deleting lesson:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: ' + error.message);
          }
        });
      }
    }
    
    // Delete assignment functionality
    const deleteAssBtns = document.querySelectorAll('.assignment-actions .delete-button');
    deleteAssBtns.forEach(btn => {
      btn.addEventListener('click', async function() {
        const assignmentId = this.getAttribute('data-id');
        if (!assignmentId) return;
        
        if (confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?')) {
          try {
            const response = await fetch(`/assignments/api/${assignmentId}`, {
              method: 'DELETE',
              credentials: 'include'
            });
            
            if (!response.ok) {
              throw new Error('Failed to delete assignment');
            }
            
            const assignmentItem = document.querySelector(`.assignment-item[data-id="${assignmentId}"]`);
            if (assignmentItem) {
              assignmentItem.style.opacity = '0';
              setTimeout(() => {
                assignmentItem.remove();
                
                // Check if there are any assignments left
                const assignmentItems = document.querySelectorAll('.assignment-item');
                if (assignmentItems.length === 0) {
                  const assignmentsList = document.querySelector('.assignments-list');
                  if (assignmentsList) {
                    assignmentsList.innerHTML = `
                      <div class="no-assignments">
                        <p>–£ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.</p>
                        <p>–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —É—á–µ–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.</p>
                      </div>
                    `;
                  }
                }
              }, 300);
            }
            
          } catch (error) {
            console.error('Error deleting assignment:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: ' + error.message);
          }
        }
      });
    });
  });
</script>

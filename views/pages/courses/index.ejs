<% contentFor('body') %>
<div class="courses-container">
  <div class="courses-header">
    <h1 class="page-title">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã</h1>
    <div class="courses-search">
      <input type="text" id="courses-search-input" placeholder="–ü–æ–∏—Å–∫ –∫—É—Ä—Å–æ–≤...">
    </div>
  </div>

  <div class="main-content-container">
    <div class="filter-column">
      <h2>–§–∏–ª—å—Ç—Ä—ã</h2>
      <form id="course-filters">
        <label for="category-filter">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
        <select id="category-filter" name="category">
          <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
          <!-- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </select>
        
        <label for="level-filter">–£—Ä–æ–≤–µ–Ω—å</label>
        <select id="level-filter" name="level">
          <option value="">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
          <option value="beginner">–ù–∞—á–∏–Ω–∞—é—â–∏–π</option>
          <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π</option>
          <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
        </select>
        
        <label for="price-filter">–¶–µ–Ω–∞</label>
        <select id="price-filter" name="price">
          <option value="">–í—Å–µ —Ü–µ–Ω—ã</option>
          <option value="free">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</option>
          <option value="paid">–ü–ª–∞—Ç–Ω—ã–µ</option>
        </select>
        
        <button type="button" class="filter-button" id="apply-filters">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
      </form>
    </div>
    
    <div class="courses-content">
      <div id="courses-preloader">
        <div class="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã...</p>
      </div>
      
      <div id="courses-empty" style="display: none;">
        <div class="empty-courses">
          <h3>–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
        </div>
      </div>
      
      <div class="available-courses-grid" id="courses-grid">
        <!-- –ö—É—Ä—Å—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
      </div>
    </div>
  </div>
</div>

<% contentFor('style') %>
<link rel="stylesheet" href="/css/courses.css">

<% contentFor('script') %>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const coursesGrid = document.getElementById('courses-grid');
    const preloader = document.getElementById('courses-preloader');
    const emptyState = document.getElementById('courses-empty');
    const searchInput = document.getElementById('courses-search-input');
    const categoryFilter = document.getElementById('category-filter');
    const levelFilter = document.getElementById('level-filter');
    const priceFilter = document.getElementById('price-filter');
    const applyFiltersBtn = document.getElementById('apply-filters');
    
    let allCourses = [];
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤
    async function loadCourses() {
      try {
        preloader.style.display = 'flex';
        coursesGrid.style.display = 'none';
        emptyState.style.display = 'none';
        
        const response = await fetch('/courses/api/available', {
          credentials: 'include'
        });
        
        if (!response.ok) {
          throw new Error('Failed to load courses');
        }
        
        allCourses = await response.json();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await loadCategories();
        
        // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        displayCourses(allCourses);
        
        preloader.style.display = 'none';
        
        if (allCourses.length === 0) {
          emptyState.style.display = 'block';
        } else {
          coursesGrid.style.display = 'grid';
        }
      } catch (error) {
        console.error('Error loading courses:', error);
        preloader.innerHTML = `<p class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã. ${error.message}</p>`;
      }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    async function loadCategories() {
      try {
        const response = await fetch('/categories/api');
        
        if (!response.ok) {
          throw new Error('Failed to load categories');
        }
        
        const categories = await response.json();
        
        categoryFilter.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
        
        categories.forEach(category => {
          const option = document.createElement('option');
          option.value = category.id;
          option.textContent = category.name;
          categoryFilter.appendChild(option);
        });
      } catch (error) {
        console.error('Error loading categories:', error);
      }
    }
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    function displayCourses(courses) {
      coursesGrid.innerHTML = '';
      
      if (courses.length === 0) {
        emptyState.style.display = 'block';
        coursesGrid.style.display = 'none';
        return;
      }
      
      emptyState.style.display = 'none';
      coursesGrid.style.display = 'grid';
      
      courses.forEach(course => {
        const courseCard = document.createElement('div');
        courseCard.className = `course-card ${course.level || 'beginner'}`;
        
        courseCard.innerHTML = `
          <div class="course-card-inner">
            <div class="course-level-badge">${getLevelText(course.level)}</div>
            <h3 class="course-title">${course.title}</h3>
            <div class="course-author">${course.author.name}</div>
            <div class="course-details">
              <div class="course-info-item">
                <span class="info-icon">üìö</span> ${course.lessons ? course.lessons.length : 0} —É—Ä–æ–∫–æ–≤
              </div>
              <div class="course-info-item">
                <span class="info-icon">üë®‚Äçüéì</span> ${course.enrollments ? course.enrollments.length : 0} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
              </div>
            </div>
            <div class="course-price">${course.price > 0 ? `${course.price} ‚ÇΩ` : '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ'}</div>
            <a href="/courses/${course.id}" class="course-btn">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
          </div>
        `;
        
        coursesGrid.appendChild(courseCard);
      });
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤
    function filterCourses() {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryValue = categoryFilter.value;
      const levelValue = levelFilter.value;
      const priceValue = priceFilter.value;
      
      const filteredCourses = allCourses.filter(course => {
        // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
        const matchesSearch = course.title.toLowerCase().includes(searchTerm) || 
                            (course.description && course.description.toLowerCase().includes(searchTerm));
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const matchesCategory = !categoryValue || course.categoryId === categoryValue;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é
        const matchesLevel = !levelValue || course.level === levelValue;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        const matchesPrice = !priceValue || 
                          (priceValue === 'free' && (course.price === 0 || course.price === "0.00")) ||
                          (priceValue === 'paid' && course.price > 0);
        
        return matchesSearch && matchesCategory && matchesLevel && matchesPrice;
      });
      
      displayCourses(filteredCourses);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    if (searchInput) {
      searchInput.addEventListener('input', filterCourses);
    }
    
    if (applyFiltersBtn) {
      applyFiltersBtn.addEventListener('click', filterCourses);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getLevelText(level) {
      switch(level) {
        case 'beginner': return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
        case 'intermediate': return '–°—Ä–µ–¥–Ω–∏–π';
        case 'advanced': return '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π';
        default: return '–ù–∞—á–∏–Ω–∞—é—â–∏–π';
      }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadCourses();
  });
</script>
